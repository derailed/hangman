# Setup

ku create -f istio.yml -f istio-initializer.yml


mik addons enable ingress

export GATEWAY_URL=$(kubectl get po -l istio=ingress -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(kubectl get svc istio-ingress -n istio-system -o 'jsonpath={.spec.ports[0].nodePort}')

 ku port-forward -n istio-system grafana-76bc5dc856-k6sfb 3000:3000 &
 http://localhost:3000/dashboard/db/istio-dashboard



ku port-forward servicegraph-7cdb6945b-d6kcm -n istio-system 8088:8088 &
http://localhost:8088/dotviz
http://localhost:8088/graph


ku port-forward prometheus-8ffcc88bb-dbd4f -n istio-system 9090:9090 &


# prometheus

kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 9090:9090 &
http://localhost:9090/graph

ku create -f k8s/istio/telemetry.yml



# Setup

## Istio

ku create -f ~/istio/install/kubernetes/istio.yaml -f ~/istio/install/kubernetes/istio-initializer.yaml

## Addons

ku create \
  -f ~/istio/install/kubernetes/addons/grafana.yaml \
  -f ~/istio/install/kubernetes/addons/prometheus.yaml \
  -f ~/istio/install/kubernetes/addons/servicegraph.yaml \
  -f ~/istio/install/kubernetes/addons/zipkin.yaml

## Forwards

kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000 &
kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=servicegraph -o jsonpath='{.items[0].metadata.name}') 3001:8088 &
kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 3002:9090 &
kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=zipkin -o jsonpath='{.items[0].metadata.name}') 3003:9411 &

http://localhost:3000/dashboard/db/istio-dashboard
http://localhost:3001/dotviz
http://localhost:3001/graph
http://localhost:3002/graph
http://localhost:3003

## Hangman

ku create \
  -f k8s/istio/telemetry.yml \
  -f k8s/quay.yml \
  -f k8s/dictionary/v1 \
  -f k8s/game \
  -f k8s/ingress.yml


## Ingress

export GATEWAY_URL=$(ku get po -l istio=ingress -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(ku get svc istio-ingress -n istio-system -o 'jsonpath={.spec.ports[0].nodePort}')

watch http $GATEWAY_URL/dictionary/v1/random_word
watch http $GATEWAY_URL/game/v1/new_game


## Setup all traffic rule


ku create -f k8s/istio/all.yml


istioctl delete routerule dictionary-v2-all -n default
istioctl get routerule dic-80 -o yaml


round(
  sum(
    irate(
      istio_request_count{source_service=~"$source",source_version=~"$source_version",destination_service=~"$http_destination",destination_version=~"$destination_version"}[1m])), 0.001)